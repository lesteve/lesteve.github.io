#+OPTIONS: num:nil toc:nil
#+REVEAL_TRANS: none
#+REVEAL_THEME: black
#+OPTIONS: reveal_width:1200 reveal_height:800
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.7.0
#+REVEAL_PLUGINS: (markdown notes highlight)
#+OPTIONS: reveal_history:t reveal_title_slide:nil
#+REVEAL_EXTRA_CSS: ./custom.css
#+Title: Enabling open science and data science via software: scikit-learn
#+Author: Loïc Estève
# #+Email: Email Address or Twitter Handle

# TODO: add news about last release with highlights

* 

#+BEGIN_EXPORT html
<h2>Enabling open science and data science via software: scikit-learn</h2>

<hr>

<h3 style="text-align: center; margin-left: 0; margin-top: 50px">
Loïc Estève
</h3>

<div style="text-align: center; margin-top: 50px">
  <img src="img/inria.png" alt="Inria" height="120px"/>
</div>
#+END_EXPORT

* About me

#+BEGIN_EXPORT html
<div class="fragment">Particle Physics background</div>
<div class="fragment step-fade-in-then-out" style="font-size: 80%">PhD main achievement: measure a cos and a sin +/- 0.8</div>

<div class="fragment">3 years in finance</div>

<div style="text-align: center margin-top: 120px" class="fragment">
    <div>Last 4 years open-source Python</div>
    <img src="img/nilearn-logo.png" height="120px">
    <img src="img/joblib_logo.svg" height="120px">
    <img src="img/scikit-learn-logo-notext.png" height="120px">
    <img src="img/dask_horizontal_white.svg" height="120px">
</div>
#+END_EXPORT

* scikit-learn
** scikit-learn vision: an enabler

#+BEGIN_EXPORT html
<div style="float: left; margin-right: 20px; width=25%">
    <img src="img/scikit-learn.png" height="200px">
</div>

<p class="fragment">Machine learning for everyone</p>

<p class="fragment">
High quality pythonic library
</p>

<p class="fragment">
Community-driven development (BSD license)
</p>
#+END_EXPORT
** Features

#+HTML: <img src="img/scikit-learn-doc.png" width="80%"/>

** Users
Monthly website traffic
#+REVEAL_HTML: <img src="img/scikit-learn-website-users.png" style="background: white"/>
** Users
#+REVEAL_HTML: <img src="img/scikit-learn-users.png"/>

** Users (industry)

#+REVEAL_HTML: <img src="img/companies-using-scikit-learn.png"/>

** Users (academia)

#+REVEAL_HTML: <img src="img/nilearn-plot.png" width="60%">

Widely used in:
- brain data analysis
- astrophysics
- genomics
- etc ...
** 0.20 release
Better support for data-science common use case:

missing values, categorical
variables, heterogeneous data, and features/targets with unusual distributions)

~ColumnTransformer~, ~TransformedTargetRegressor~, ~KBinsDiscretizer~, ...

See [[https://scikit-learn.org/stable/whats_new.html#version-0-20-1][changelog]]
** scikit-learn strengths

Easy to use:

#+REVEAL_HTML: <div class="step-fade-in-then-out fragment">
#+BEGIN_SRC python
from sklearn.svm import SVC
classifier = SVC()
svm.fit(X_train, y_train)
y_test = classifier.predict(X_test)
#+END_SRC
#+REVEAL_HTML: </div>

#+REVEAL_HTML: <div class="fragment">
#+BEGIN_SRC python
from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier()
svm.fit(X_train, y_train)
y_test = classifier.predict(X_test)
#+END_SRC

Consistent API
#+REVEAL_HTML: </div>

#+ATTR_REVEAL: :frag t

#+ATTR_REVEAL: :frag t
Optimised for speed: Numpy and Cython

# Small hack below. This is annoying but using ATTR_REVEAL on something that
# has a link creates a fragment for both the text and the link
#+BEGIN_EXPORT html
<div class="fragment"/>
#+END_EXPORT

Great documentation: [[https://scikit-learn.org][scikit-learn.org]]

** Doc: gallery of examples

[[https://sphinx-gallery.readthedocs.io/][sphinx-gallery]]

#+REVEAL_HTML: <img src="img/doc-gallery-examples.png" width="80%"/>

** Doc: example

#+REVEAL_HTML: <img src="img/doc-example.png" width="70%"/>

** Doc: API documentation

#+REVEAL_HTML: <img src="img/doc-reference.png" width="80%"/>
#+REVEAL_HTML: <img src="img/doc-reference-to-examples.png" width="80%"/>

** Doc: user guide

#+REVEAL_HTML: <img src="img/doc-user-guide.png"/>

* Community
** Contributors

#+HTML: <img src="img/scikit-learn-contributors.png" width="70%"/>

# ** Development process
# - 2 core devs approvals to get a pull request merged <!-- .element class="fragment" -->
# - <!-- .element class="fragment" --> CIs in each pull request: **AppVeyor**
#   (Windows), **Travis** (Linux), **CircleCI** (generate documentation),
#   **codecov** (coverage, useful browser extension)<br/>
# - <img src="img/continuous-integration.png" height="250px" class="fragment step-fade-in-then-out"/>
# - daily tests against our dependencies development versions (numpy, scipy, ...):
#   very useful to catch regressions or deprecated functionalities <!-- .element class="fragment" -->
** Project activity

~50 notifications per day from comments on PRs/issues

#+HTML: <img src="img/scikit-learn-opened-issues-and-prs.png">

User support drowns core devs

Reviewing PRs is the main bottleneck

[[https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure][Road and Bridges]] by Nadia Eghbal
** scikit-learn contrib

http://contrib.scikit-learn.org

#+ATTR_REVEAL: :frag t
Not everything can (and has to) go in scikit-learn

#+ATTR_REVEAL: :frag t
For cutting-edge algorithms, quick development, maturation

#+ATTR_REVEAL: :frag t
nice template to start the project (testing, CIs, ...) + visibility

#+ATTR_REVEAL: :frag t
requirements: follow the scikit-learn API, docs, tests

#+ATTR_REVEAL: :frag t
~10 projects in scikit-learn contrib currently

# Local variables:
# after-save-hook: org-reveal-export-to-html
# end:

** Funding (public)

#+BEGIN_EXPORT html
<div style="float: right">2015 & 2016</div>

New-York: 350 k$ More-Sloan grant<br/>
<small>
A. Mueller (full time). Students M. Kumar, V. Birodkar
</small>

Telecom Paris-Tech: 200 k€ WendelinIA grant + 12 k€ CDS<br/>
<small>
Programmers: T. Guillemot, T. Dupré. Students: M. Kumar, D. Sullivan, V.R.
Rajagopalan, N. Goix
</small>

Inria Parietal: 120 k€ Inria, + 100 k€ WendelinIA + 50 k€ ANR + 30 k€ CDS<br/>
<small>
Programmers: O. Grisel, L. Estève, G. Lemaître, J. Van den Bosche. Students:
A. Mensch, J. Schreiber, G. Patrini
</small>
#+END_EXPORT
*> 400 k€ / year*
** Funding (sponsors)

#+HTML: <img src="img/scikit-learn-foundation-sponsors.png", width="40%" style="float: left; margin-right: 20px"/>

Scikit-learn foundation @ Inria launched in September 2018

companies: better visibility on software they rely on, good for Public Relations

scikit-learn: permanent staff to consolidate project, useful feed-back from
advanced users

See [[http://gael-varoquaux.info/programming/a-foundation-for-scikit-learn-at-inria.html][Gaël Varoquaux]]'s blog post

** Python scientific stack

#+HTML: <img src="img/pydata-stack.png" width="80%"/>

Someone else may solve your problems

#+HTML: <small>One advantage of being part of the very dynamic Python ecosystem</small>

** dask

#+BEGIN_EXPORT html
<div>
<img src="img/dask-array-white-text.svg" width=35% style="float: left; margin-right: 20px"/>
High-level interfaces: collections with an interface very similar to numpy/pandas
<small>Use case: pandas dataframe bigger than RAM</small>
</div>

<div>
<img src="img/grid-search-schedule.gif" width="35%" style="float: left; margin-right: 20px"/>
Low-level interfaces for parallel computing
</div>

<img src="img/dask-diagnostics.png" width="35%" style="float: left;
margin-right: 20px"/>
#+END_EXPORT

Other goodies:
- live diagnostic dashboard
- statistical profiler

Try dask in your browser via [[https://mybinder.org/v2/gh/dask/dask-examples/master?urlpath=lab][binder]]

** dask integration in scikit-learn 

#+BEGIN_SRC python
from sklearn.ensemble import RandomForestClassifier



clf = RandomForestClassifier(n_estimators=200, n_jobs=-1)


clf.fit(X, y)
#+END_SRC
** dask integration in scikit-learn
#+BEGIN_SRC python
from sklearn.externals import joblib
from dask.distributed import Client

client = Client('scheduler-address')
clf = RandomForestClassifier(n_estimators=200, n_jobs=-1)

with joblib.parallel_backend("dask", scatter=[X, y]):
    clf.fit(X, y)
#+END_SRC
** dask-related projects
[[http://ml.dask.org/][dask-ml]]: fit scikit-learn models on data bigger than RAM, or distribute scikit-learn on a cluster. Integration with xgboost.

[[https://docs.dask.org/en/latest/setup/hpc.html][dask-jobqueue]] smoothly
transition your *existing* Python code from your machine to a HPC cluster (SLURM, PBS, etc ...)

#+BEGIN_SRC python
from dask_jobqueue import SLURMCluster
cluster = SLURMCluster(<slurm_specific>)
cluster.scale(4)  # 4 cores

from dask.distributed import Client
client = Client(cluster)
# dask generic code agnostic to the cluster
#+END_SRC

Similar packages for running dask on
[[https://kubernetes.dask.org/en/latest/][Kubernetes]] or on a [[https://yarn.dask.org/en/latest/][Hadoop/Yarn]] cluster.
* Summary

#+BEGIN_EXPORT html
<div class="fragment">
<bold>Vision<bold>: Machine learning as a means not an end

<p style="font-size: 60%">
Versatile library: the right level of abstraction. Close to research, but seeking different tradeoffs
</p>

</div>

<div class="fragment">
<bold>Tool<bold>: Simple API across learners

<p style="font-size: 60%">
Numpy arrays as data containers. Fast enough.
</p>

</div>

<div class="fragment">
<bold>Project<bold>: Many people working together

<p style="font-size: 60%">
Ensure code quality and maintainability
</p>
</div>
#+END_EXPORT

* 
